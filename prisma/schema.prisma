generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["jsonProtocol"]
}

datasource db {
  provider          = "postgresql"
  url               = env("POSTGRES_PRISMA_URL")
  directUrl         = env("POSTGRES_URL_NON_POOLING")
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String   @map("user_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String      @id @default(cuid())
  infosId       String      @unique @map("infos_id")
  name          String
  username      String      @unique
  email         String      @unique
  emailVerified DateTime?   @map("email_verified")
  image         String?
  createdAt     DateTime    @default(now()) @map("created_at")
  updatedAt     DateTime    @updatedAt @map("updated_at")
  accounts      Account[]
  sessions      Session[]
  infos         UserInfos   @relation(fields: [infosId], references: [id])
  albums        UserAlbum[]

  @@map("users")
}

model UserInfos {
  id       String  @id @default(cuid())
  username String  @unique
  job      String?
  bio      String?
  location String?
  website  String?
  twitter  String?
  github   String?
  theme    String  @default("blue")
  user     User?

  @@map("user_infos")
}

model Album {
  id     String      @id @unique @default(cuid())
  name   String
  artist String
  image  String
  users  UserAlbum[]

  @@map("albums")
}

model UserAlbum {
  username String
  albumId  String @map("album_id")
  album    Album  @relation(fields: [albumId], references: [id])
  user     User   @relation(fields: [username], references: [username])

  @@id([username, albumId])
  @@map("users_albums")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
